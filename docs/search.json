[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "luxorum-dashboard-docs",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "auth/index.html",
    "href": "auth/index.html",
    "title": "Authentication System Documentation",
    "section": "",
    "text": "This documentation covers the implementation of our authentication system using Next.js 14+, AWS Cognito, and TypeScript. The system provides secure user authentication, authorization, and session management for our web application.\n\n\n\nFrontend: Next.js 14+ with App Router\nAuthentication: AWS Cognito User Pools\nConfiguration: AWS Parameter Store\nLanguage: TypeScript\nValidation: Zod\nState Management: React Server Components + Client Hooks\n\n\n\n\n\nSecure user registration and login\nMulti-factor authentication (MFA)\nEmail verification\nSession management\nRoute protection\nAuthorization controls\nSecure token handling\nForm validation\nError management",
    "crumbs": [
      "Documentation",
      "Authentication"
    ]
  },
  {
    "objectID": "auth/index.html#tech-stack",
    "href": "auth/index.html#tech-stack",
    "title": "Authentication System Documentation",
    "section": "",
    "text": "Frontend: Next.js 14+ with App Router\nAuthentication: AWS Cognito User Pools\nConfiguration: AWS Parameter Store\nLanguage: TypeScript\nValidation: Zod\nState Management: React Server Components + Client Hooks",
    "crumbs": [
      "Documentation",
      "Authentication"
    ]
  },
  {
    "objectID": "auth/index.html#key-features",
    "href": "auth/index.html#key-features",
    "title": "Authentication System Documentation",
    "section": "",
    "text": "Secure user registration and login\nMulti-factor authentication (MFA)\nEmail verification\nSession management\nRoute protection\nAuthorization controls\nSecure token handling\nForm validation\nError management",
    "crumbs": [
      "Documentation",
      "Authentication"
    ]
  },
  {
    "objectID": "auth/index.html#architecture",
    "href": "auth/index.html#architecture",
    "title": "Authentication System Documentation",
    "section": "2.1 Architecture Overview",
    "text": "2.1 Architecture Overview\n→ View Details\nUnderstanding the system’s architecture, including: - Client-server interaction - Authentication flow - Component relationships - Data flow patterns",
    "crumbs": [
      "Documentation",
      "Authentication"
    ]
  },
  {
    "objectID": "auth/index.html#config",
    "href": "auth/index.html#config",
    "title": "Authentication System Documentation",
    "section": "2.2 Configuration & Setup",
    "text": "2.2 Configuration & Setup\n→ View Details\nSetting up the required infrastructure: - AWS Parameter Store configuration - Cognito User Pool setup - Environment configuration - TypeScript types",
    "crumbs": [
      "Documentation",
      "Authentication"
    ]
  },
  {
    "objectID": "auth/index.html#flows",
    "href": "auth/index.html#flows",
    "title": "Authentication System Documentation",
    "section": "2.3 Authentication Flows",
    "text": "2.3 Authentication Flows\n\n2.3.1 Login Process\n→ View Details\nComplete login implementation: - Form handling - Validation - MFA support - Token management - Error handling\n\n\n2.3.2 Registration Process\n→ View Details\nUser registration implementation: - Form validation - Email verification - Automatic login - Error management",
    "crumbs": [
      "Documentation",
      "Authentication"
    ]
  },
  {
    "objectID": "auth/index.html#implementation",
    "href": "auth/index.html#implementation",
    "title": "Authentication System Documentation",
    "section": "2.4 Implementation Details",
    "text": "2.4 Implementation Details\n\n2.4.1 Components\n→ View Details\nReact component organization: - Form components - Client components - Server components - Shared utilities\n\n\n2.4.2 Middleware\n→ View Details\nProtection and routing: - Route protection - Auth middleware - Request handling - Cookie management\n\n\n2.4.3 Session Management\n→ View Details\nSession handling strategy: - Token management - Session types - Cookie handling - Refresh logic\n\n\n2.4.4 Data Access\n→ View Details\nData handling patterns: - Authorization - Data access layer - Transfer objects - Caching strategy\n\n\n2.4.5 Security\n→ View Details\nSecurity implementations: - Best practices - Protection mechanisms - Rate limiting - Testing approaches",
    "crumbs": [
      "Documentation",
      "Authentication"
    ]
  },
  {
    "objectID": "auth/index.html#code-organization",
    "href": "auth/index.html#code-organization",
    "title": "Authentication System Documentation",
    "section": "4.1 Code Organization",
    "text": "4.1 Code Organization\nsrc/\n├── app/\n│   ├── (auth)/\n│   │   ├── login/\n│   │   └── signup/\n│   └── api/\n├── components/\n│   └── forms/\n│       ├── login/\n│       └── signup/\n└── lib/\n    ├── auth/\n    ├── validations/\n    └── config/",
    "crumbs": [
      "Documentation",
      "Authentication"
    ]
  },
  {
    "objectID": "auth/index.html#best-practices",
    "href": "auth/index.html#best-practices",
    "title": "Authentication System Documentation",
    "section": "4.2 Best Practices",
    "text": "4.2 Best Practices\n\nType Safety\n\nUse TypeScript interfaces for all data structures\nImplement Zod schemas for validation\nMaintain strict type checking\n\nSecurity\n\nFollow AWS security best practices\nImplement proper error handling\nUse secure session management\nApply rate limiting\n\nCode Quality\n\nWrite unit tests for critical paths\nMaintain consistent error handling\nFollow component organization patterns\nUse proper TypeScript practices",
    "crumbs": [
      "Documentation",
      "Authentication"
    ]
  },
  {
    "objectID": "auth-implementation-guide.html#aws-parameter-store-setup",
    "href": "auth-implementation-guide.html#aws-parameter-store-setup",
    "title": "Next.js Authentication Flow with Cognito and Zod",
    "section": "3.1 AWS Parameter Store Setup",
    "text": "3.1 AWS Parameter Store Setup\n// lib/config/parameterStore.ts\nimport { SSMClient, GetParameterCommand } from \"@aws-sdk/client-ssm\"\n\nconst ssmClient = new SSMClient({\n  region: process.env.AWS_REGION\n})\n\nexport async function getParameter(name: string, withDecryption = true) {\n  const command = new GetParameterCommand({\n    Name: name,\n    WithDecryption: withDecryption\n  })\n\n  try {\n    const response = await ssmClient.send(command)\n    return response.Parameter?.Value\n  } catch (error) {\n    console.error(`Error fetching parameter ${name}:`, error)\n    throw error\n  }\n}\n\n// Usage in environment configuration\nexport async function loadSecureConfig() {\n  return {\n    cognitoUserPoolId: await getParameter('/auth/cognito/user-pool-id'),\n    cognitoClientId: await getParameter('/auth/cognito/client-id'),\n    cognitoDomain: await getParameter('/auth/cognito/domain')\n  }\n}"
  },
  {
    "objectID": "auth-implementation-guide.html#environment-variables",
    "href": "auth-implementation-guide.html#environment-variables",
    "title": "Next.js Authentication Flow with Cognito and Zod",
    "section": "3.2 Environment Variables",
    "text": "3.2 Environment Variables\n// .env.local\nAWS_REGION=\"us-east-1\"\nAWS_ACCESS_KEY_ID=\"your-access-key\"\nAWS_SECRET_ACCESS_KEY=\"your-secret-key\""
  },
  {
    "objectID": "auth-implementation-guide.html#cognito-configuration",
    "href": "auth-implementation-guide.html#cognito-configuration",
    "title": "Next.js Authentication Flow with Cognito and Zod",
    "section": "3.3 Cognito Configuration",
    "text": "3.3 Cognito Configuration\n// lib/auth/cognito.ts\nimport { CognitoUserPool } from 'amazon-cognito-identity-js'\nimport { loadSecureConfig } from '../config/parameterStore'\n\nlet userPool: CognitoUserPool | null = null\n\nexport async function getUserPool() {\n  if (!userPool) {\n    const config = await loadSecureConfig()\n    userPool = new CognitoUserPool({\n      UserPoolId: config.cognitoUserPoolId,\n      ClientId: config.cognitoClientId\n    })\n  }\n  return userPool\n}"
  },
  {
    "objectID": "auth-implementation-guide.html#form-validation-schemas",
    "href": "auth-implementation-guide.html#form-validation-schemas",
    "title": "Next.js Authentication Flow with Cognito and Zod",
    "section": "3.4 Form Validation Schemas",
    "text": "3.4 Form Validation Schemas\n// lib/validations/auth.ts\nimport { z } from 'zod'\n\nexport const loginSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters')\n})\n\nexport const signupSchema = loginSchema.extend({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  confirmPassword: z.string()\n}).refine((data) =&gt; data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"]\n})\n\nexport type LoginInput = z.infer&lt;typeof loginSchema&gt;\nexport type SignupInput = z.infer&lt;typeof signupSchema&gt;"
  },
  {
    "objectID": "auth-implementation-guide.html#signup-form-implementation",
    "href": "auth-implementation-guide.html#signup-form-implementation",
    "title": "Next.js Authentication Flow with Cognito and Zod",
    "section": "4.1 Signup Form Implementation",
    "text": "4.1 Signup Form Implementation\n// components/forms/signup/SignupForm.tsx\n'use client'\n\nimport { useFormState, useFormStatus } from 'react-dom'\nimport { SignupFormFields } from './SignupFormFields'\nimport { SignupFormActions } from './SignupFormActions'\nimport { signup } from '@/app/actions/auth'\n\nconst initialState = {\n  errors: null,\n  message: null\n}\n\nexport function SignupForm() {\n  const [state, formAction] = useFormState(signup, initialState)\n  const { pending } = useFormStatus()\n\n  return (\n    &lt;form action={formAction} className=\"space-y-6\"&gt;\n      &lt;SignupFormFields errors={state.errors} /&gt;\n      &lt;SignupFormActions pending={pending} /&gt;\n      {state.message && (\n        &lt;p className=\"text-red-500\"&gt;{state.message}&lt;/p&gt;\n      )}\n    &lt;/form&gt;\n  )\n}\n\n// components/forms/signup/SignupFormFields.tsx\nexport function SignupFormFields({ errors }) {\n  return (\n    &lt;div className=\"space-y-4\"&gt;\n      &lt;div&gt;\n        &lt;input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Full Name\"\n          className=\"w-full p-2 border rounded\"\n        /&gt;\n        {errors?.name && (\n          &lt;p className=\"text-red-500 text-sm\"&gt;{errors.name}&lt;/p&gt;\n        )}\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          className=\"w-full p-2 border rounded\"\n        /&gt;\n        {errors?.email && (\n          &lt;p className=\"text-red-500 text-sm\"&gt;{errors.email}&lt;/p&gt;\n        )}\n      &lt;/div&gt;\n      {/* Additional fields */}\n    &lt;/div&gt;\n  )\n}\n\n// components/forms/signup/SignupFormActions.tsx\nexport function SignupFormActions({ pending }) {\n  return (\n    &lt;div className=\"flex justify-end space-x-4\"&gt;\n      &lt;button\n        type=\"submit\"\n        disabled={pending}\n        className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50\"\n      &gt;\n        {pending ? 'Signing up...' : 'Sign Up'}\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n[Previous sections remain the same from Server Actions onwards…]"
  },
  {
    "objectID": "auth-implementation-guide.html#parameter-store-access",
    "href": "auth-implementation-guide.html#parameter-store-access",
    "title": "Next.js Authentication Flow with Cognito and Zod",
    "section": "5.1 Parameter Store Access",
    "text": "5.1 Parameter Store Access\n// Configuration for AWS Parameter Store access\nconst parameterStorePolicy = {\n  Version: \"2012-10-17\",\n  Statement: [\n    {\n      Effect: \"Allow\",\n      Action: [\n        \"ssm:GetParameter\",\n        \"ssm:GetParameters\"\n      ],\n      Resource: [\n        \"arn:aws:ssm:region:account-id:parameter/auth/*\"\n      ]\n    }\n  ]\n}"
  },
  {
    "objectID": "auth-implementation-guide.html#environment-specific-parameters",
    "href": "auth-implementation-guide.html#environment-specific-parameters",
    "title": "Next.js Authentication Flow with Cognito and Zod",
    "section": "5.2 Environment Specific Parameters",
    "text": "5.2 Environment Specific Parameters\n# Development\naws ssm put-parameter \\\n  --name \"/auth/dev/cognito/user-pool-id\" \\\n  --value \"your-dev-pool-id\" \\\n  --type \"SecureString\"\n\n# Production\naws ssm put-parameter \\\n  --name \"/auth/prod/cognito/user-pool-id\" \\\n  --value \"your-prod-pool-id\" \\\n  --type \"SecureString\""
  }
]