---
title: "Next.js Authentication Flow with Cognito and Zod"
subtitle: "Implementation Guide using App Router, TypeScript, and AWS Cognito"
format:
  html:
    toc: true
    number-sections: true
    highlight-style: github
---

# Architecture Overview

![](./authentication-overview.jpg)

# Technology Stack

- Next.js 14+ with App Router
- TypeScript
- AWS Cognito User Pools
- AWS Parameter Store
- Zod for validation
- React Server Components

# Configuration Setup

## AWS Parameter Store Setup

```typescript
// lib/config/parameterStore.ts
import { SSMClient, GetParameterCommand } from "@aws-sdk/client-ssm"

const ssmClient = new SSMClient({
  region: process.env.AWS_REGION
})

export async function getParameter(name: string, withDecryption = true) {
  const command = new GetParameterCommand({
    Name: name,
    WithDecryption: withDecryption
  })

  try {
    const response = await ssmClient.send(command)
    return response.Parameter?.Value
  } catch (error) {
    console.error(`Error fetching parameter ${name}:`, error)
    throw error
  }
}

// Usage in environment configuration
export async function loadSecureConfig() {
  return {
    cognitoUserPoolId: await getParameter('/auth/cognito/user-pool-id'),
    cognitoClientId: await getParameter('/auth/cognito/client-id'),
    cognitoDomain: await getParameter('/auth/cognito/domain')
  }
}
```

## Environment Variables

```typescript
// .env.local
AWS_REGION="us-east-1"
AWS_ACCESS_KEY_ID="your-access-key"
AWS_SECRET_ACCESS_KEY="your-secret-key"
```

## Cognito Configuration

```typescript
// lib/auth/cognito.ts
import { CognitoUserPool } from 'amazon-cognito-identity-js'
import { loadSecureConfig } from '../config/parameterStore'

let userPool: CognitoUserPool | null = null

export async function getUserPool() {
  if (!userPool) {
    const config = await loadSecureConfig()
    userPool = new CognitoUserPool({
      UserPoolId: config.cognitoUserPoolId,
      ClientId: config.cognitoClientId
    })
  }
  return userPool
}
```

## Form Validation Schemas

```typescript
// lib/validations/auth.ts
import { z } from 'zod'

export const loginSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(8, 'Password must be at least 8 characters')
})

export const signupSchema = loginSchema.extend({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  confirmPassword: z.string()
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"]
})

export type LoginInput = z.infer<typeof loginSchema>
export type SignupInput = z.infer<typeof signupSchema>
```

# Component Structure

```
components/
├── forms/
│   ├── signup/
│   │   ├── SignupForm.tsx
│   │   ├── SignupFormFields.tsx
│   │   ├── SignupFormActions.tsx
│   │   └── types.ts
│   └── login/
│       ├── LoginForm.tsx
│       ├── LoginFormFields.tsx
│       ├── LoginFormActions.tsx
│       └── types.ts
```

## Signup Form Implementation

```typescript
// components/forms/signup/SignupForm.tsx
'use client'

import { useFormState, useFormStatus } from 'react-dom'
import { SignupFormFields } from './SignupFormFields'
import { SignupFormActions } from './SignupFormActions'
import { signup } from '@/app/actions/auth'

const initialState = {
  errors: null,
  message: null
}

export function SignupForm() {
  const [state, formAction] = useFormState(signup, initialState)
  const { pending } = useFormStatus()

  return (
    <form action={formAction} className="space-y-6">
      <SignupFormFields errors={state.errors} />
      <SignupFormActions pending={pending} />
      {state.message && (
        <p className="text-red-500">{state.message}</p>
      )}
    </form>
  )
}

// components/forms/signup/SignupFormFields.tsx
export function SignupFormFields({ errors }) {
  return (
    <div className="space-y-4">
      <div>
        <input
          type="text"
          name="name"
          placeholder="Full Name"
          className="w-full p-2 border rounded"
        />
        {errors?.name && (
          <p className="text-red-500 text-sm">{errors.name}</p>
        )}
      </div>
      <div>
        <input
          type="email"
          name="email"
          placeholder="Email"
          className="w-full p-2 border rounded"
        />
        {errors?.email && (
          <p className="text-red-500 text-sm">{errors.email}</p>
        )}
      </div>
      {/* Additional fields */}
    </div>
  )
}

// components/forms/signup/SignupFormActions.tsx
export function SignupFormActions({ pending }) {
  return (
    <div className="flex justify-end space-x-4">
      <button
        type="submit"
        disabled={pending}
        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
      >
        {pending ? 'Signing up...' : 'Sign Up'}
      </button>
    </div>
  )
}
```

[Previous sections remain the same from Server Actions onwards...]

# Security Considerations

## Parameter Store Access

```typescript
// Configuration for AWS Parameter Store access
const parameterStorePolicy = {
  Version: "2012-10-17",
  Statement: [
    {
      Effect: "Allow",
      Action: [
        "ssm:GetParameter",
        "ssm:GetParameters"
      ],
      Resource: [
        "arn:aws:ssm:region:account-id:parameter/auth/*"
      ]
    }
  ]
}
```

## Environment Specific Parameters

```bash
# Development
aws ssm put-parameter \
  --name "/auth/dev/cognito/user-pool-id" \
  --value "your-dev-pool-id" \
  --type "SecureString"

# Production
aws ssm put-parameter \
  --name "/auth/prod/cognito/user-pool-id" \
  --value "your-prod-pool-id" \
  --type "SecureString"
```


# Deployment Considerations

1. **Environment Configuration**
   - Set up different Cognito User Pools for each environment
   - Configure appropriate callback URLs
   - Set up proper CORS settings

2. **Security Headers**
   ```typescript
   // next.config.js
   const securityHeaders = [
     {
       key: 'X-Frame-Options',
       value: 'DENY'
     },
     {
       key: 'Content-Security-Policy',
       value: "default-src 'self'"
     }
   ]
   
   module.exports = {
     async headers() {
       return [
         {
           source: '/:path*',
           headers: securityHeaders
         }
       ]
     }
   }
   ```

3. **Monitoring**
   - Set up AWS CloudWatch for Cognito monitoring
   - Implement logging for authentication attempts
   - Track session statistics and user behavior